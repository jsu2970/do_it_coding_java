import java.util.*;

class Check {  //ACGT 검사를 하기 위한 클래스
    int[] needDnaNumber = new int[4];  //클래스에 따로 복제될 사용자가 원하는 조건의 dna 개수
    int[] checkNumber = new int[4];  //현재 슬라이드가 ACGT의 개수를 만족하고 있는지 검사해주는 배열로, 이것을 만족하면 count를 증가시킴

    Check (int[] temp) {  //배열을 그대로 복사함
        for (int i = 0; i < 4; i++) {
            needDnaNumber[i] = temp[i];
        }
    }

    public void plusCheckArr (char alphabet) {  //새로 들어오는 알파벳을 검사하는 함수
        if (alphabet == 'A') {
            this.checkNumber[0]++;
        }
        else if (alphabet == 'C') {
            this.checkNumber[1]++;
        }
        else if (alphabet == 'G') {
            this.checkNumber[2]++;
        }
        else if (alphabet == 'T') {
            this.checkNumber[3]++;
        }
        else {
            System.out.println("오류");
        }
    }

    public void minusCheckArr (char alphabet) {  //삭제할 알파벳을 검사하는 함수
        if (alphabet == 'A') {
            this.checkNumber[0]--;
        }
        else if (alphabet == 'C') {
            this.checkNumber[1]--;
        }
        else if (alphabet == 'G') {
            this.checkNumber[2]--;
        }
        else if (alphabet == 'T') {
            this.checkNumber[3]--;
        }
        else {
            System.out.println("오류");
        }
    }

    public int returnResult () {
        int resultCount = 0;

        for (int i = 0; i < 4; i++) {
            if (checkNumber[i] >= needDnaNumber[i]) {  //만약 요구하는 ACGT개수보다 검사한 값이 더 많다면 count 증가
                resultCount++;
            }
        }

        if (resultCount == 4) {  //만약 카운트가 4라면 ACGT모두 요구치를 만족한다는 의미임
            return 1;  //1을 return해서 ++을 하는 효과를 얻음
        }
        else {
            return 0;
        }
    }
}

public class do_it_num9 {  //12891
    public static void main(String arg[])
    {
        Scanner sc = new Scanner(System.in);

        System.out.print("DNA 문자열의 길이, 부분 문자열의 길이 입력: ");
        int dnaLength = sc.nextInt();  //charAt로 검사할 때 필요함
        int subArrLength = sc.nextInt();  //검사할 윈도우 크기
        sc.nextLine();  //개행 문자 제거

        System.out.println("DNA 문자열 입력");
        String dna = sc.nextLine();

        int[] needDnaNumber = new int[4];  //ACGT는 4개이므로 4로 고정
        System.out.println("부분 문자열에 포함될 A, C, G, T 입력: ");
        for (int i = 0; i < 4; i++) {
            needDnaNumber[i] = sc.nextInt();
        }

        long beforeTime = System.currentTimeMillis();  //시작 시간

        Check chkNum = new Check(needDnaNumber);  //DNA를 검사 해줄 객체 선언
        int count = 0;  //부분 배열 개수

        //슬라이딩 윈도우로 부분 문자열의 길이만큼 검사하여 부분 배열이 몇개가 조건을 만족하는지 탐색함

        int start = 0, end = subArrLength - 1;  //부분 배열의 크기만큼 인덱스 할당

        //루프에 들어가기전 현재 배열 상태 검사
        for (int i = start; i < subArrLength; i++) {
            char current = dna.charAt(i);

            chkNum.plusCheckArr(current);
        }
        count += chkNum.returnResult();  //슬라이드가 조건을 만족하는지 검사함

        start++;  //한 칸 검사했으니 슬라이드를 한 칸 이동시킴
        end++;

        while (end < dnaLength) {  //end인덱스가 전체 dna길이보다 크거나 같아지면 안됨
            //다음 슬라이드로 넘어왔기 때문에 start인덱스 전의 알파벳을 제외해야 함
            chkNum.minusCheckArr(dna.charAt(start - 1));

            //다음 슬라이드로 넘어왔기 때문에 end인덱스의 알파벳을 포함시켜야 함
            chkNum.plusCheckArr(dna.charAt(end));
            //System.out.println(dna.charAt(start - 1) + ", " + dna.charAt(end));

            count += chkNum.returnResult();  //이번 슬라이드가 조건을 만족하는지 검사함

            start++;  //다음 슬라이드로 이동함
            end++;
        }

        System.out.println("조건을 만족하는 슬라이드의 개수: " + count);

        //총 걸린 시간을 계산하는 과정
        long afterTime = System.currentTimeMillis();
        System.out.println("총 소요 시간: " + (afterTime - beforeTime) / 1000 + "초");
    }
}
