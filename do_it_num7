import java.util.*;

public class do_it_num7 {
    public static void  main(String arg[])
    {
        Scanner sc = new Scanner(System.in);

        System.out.print("재료의 개수 (2개 이상이어야 함): ");
        int num = sc.nextInt();
        System.out.print("갑옷을 완성하는 번호의 합: ");
        int numSum = sc.nextInt();

        //배열 완성
        int[] arr = new int[num];
        System.out.println("재료 입력: ");
        for (int i = 0; i < num; i++) {
            arr[i] = sc.nextInt();
        }

        long beforeTime = System.currentTimeMillis();  //시작 시간

        int count = 0;  //갑옷 개수
        /*
        num6과 마찬가지로 투 포인터를 이용해서 해결하면 됨
        하지만 배열을 정렬한 후 사용해야 함
        */

        //quick sort로 배열 정렬
        Arrays.sort(arr);

        int start = 0, end = num - 1;  //인덱스
        int sum = arr[start] + arr[end];  //두 수의 합을 저장할 공간 -> 처음엔 0과 num - 1 인덱스의 값이 더해져 있음
        while (start != end) {
            if (numSum > sum) {  //구하려는 갑옷의 합보다 두 수를 더한 값이 작으면 start인덱스를 늘려서 더하는 값을 늘려야 함
                start++;
                sum = arr[start] + arr[end];
            }
            else if (numSum < sum) {  //구하려는 갑옷의 합이 두 수를 더한 값보다 작으면 end인덱스를 줄여서 더하는 값을 줄여야 함
                end--;
                sum = arr[start] + arr[end];
            }
            else if (numSum == sum) {  //sum값이 구하려는 값과 일치하면 count를 늘리고 start또는 end값을 변경시켜줌
                count++;
                start++;
                sum = arr[start] + arr[end];
            }
            else {
                System.out.println("오류");
            }
            //테스트용 System.out.println("start: " + start + ", end: " + end + ", sum: " + sum);
        }

        System.out.println("갑옷의 개수: " + count);

        //총 걸린 시간을 계산하는 과정
        long afterTime = System.currentTimeMillis();
        System.out.println("총 소요 시간: " + (afterTime - beforeTime) / 1000 + "초");
    }
}
