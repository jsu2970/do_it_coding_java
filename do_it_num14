import java.util.*;

public class do_it_num14 {  //11286
    public static void main(String arg[]) {
        Scanner sc = new Scanner(System.in);

        System.out.print("연산의 개수: ");
        int length = sc.nextInt();

        int enter[] = new int[length];  //입력을 저장해놓을 배열
        System.out.println("숫자를 차례로 입력: ");
        for (int i = 0; i < length; i++) {
            enter[i] = sc.nextInt();
        }

        long beforeTime = System.currentTimeMillis();  //시작 시간

        //우선순위 큐를 사용하되, 기본 우선순위인 오름차순이 아닌, 절대값이 기준인 우선순위를 override 해야함
        PriorityQueue<Integer> que = new PriorityQueue<Integer>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {  //큐에 오름차순으로 값이 쌓이게 됨
                    if (Math.abs(o1) > Math.abs(o2)) {
                        return 1;
                    }
                    else if (Math.abs(o1) < Math.abs(o2)) {
                        return -1;
                    }
                    else {
                        if (o1 > o2) {  //값이 같은 경우 음수를 더 낮은 수로 봄
                            return 1;
                        }
                        else {
                            return -1;
                        }
                    }
                }
        });

        //우선순위 큐는 완전 이진트리로 알아서 정렬해줌
        for (int i = 0; i < length; i++) {
            if (enter[i] == 0) {  //0인 경우 스택의 값 중, 가장 작은 값을 출력함
                if (que.isEmpty()) {  //스택이 비어있는 경우
                    System.out.println(0);
                }
                else {
                    System.out.println(que.remove());
                }
            }
            else {  //0이 아닌 경우, 스택에 값을 넣음
                que.add(enter[i]);
            }
        }

        //총 걸린 시간을 계산하는 과정
        long afterTime = System.currentTimeMillis();
        System.out.println("총 소요 시간: " + (afterTime - beforeTime) / 1000 + "초");
    }
}
