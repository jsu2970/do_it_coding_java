import java.util.*;

//스텍에 값을 1부터 순서대로 저장할 때 (오름 차순으로 저장), pop행위를 할 시 사용자가 입력한 순서대로 출력이 나오는지 검사하는 프로그램
public class do_it_num11 {  //1874
    public static void main(String arg[]) {
        Scanner sc = new Scanner(System.in);

        System.out.print("수열의 개수: ");
        int length = sc.nextInt();

        int arr[] = new int[length];
        System.out.println("배열 입력(중복된 숫자 제외): ");
        for (int i = 0; i < length; i++) {
            arr[i] = sc.nextInt();
        }

        long beforeTime = System.currentTimeMillis();  //시작 시간

        Stack<Integer> stack = new Stack<>();
        int stackNum = 1;  //1부터 차례로 숫자를 넣기 시작함
        int index = 0;  //배열의 인덱스
        ArrayList<Character> mos = new ArrayList<>();  //+, - 저장용 배열
        while(index < length ) {   //검사하려는 배열 길이보다 index가 커지면 안됨 & 스텍을 비울 때까지 반복문을 돌아야 함 (pop 연산을 위함)
            if (!stack.isEmpty() && stack.peek() == arr[index]) {  //현재 찾고있는 값이 스텍의 맨 위에 있는 경우
                stack.pop();  //스텍에서 꺼내고 -를 출력하기 위해 저장함
                mos.add('-');
                index++;  //인덱스 증가
            }
            else if (!stack.isEmpty() && stack.peek() > arr[index]) {  //찾고있는 값이 스텍의 맨 위에있는 값보다 작은 경우
                System.out.println("No");  //ex) 4 2 5를 사용자가 입력한 경우, 4 -> pop 후 2를 얻어야 하지만 중간에 3이 껴있으므로 4 3 2... 로 출력이 되어 입력한 순서가 무너짐
                break;
            }
            else {
                stack.push(stackNum);  //스텍에 값을 순서대로 쌓음
                stackNum++;
                mos.add('+');
            }
        }

        if (index == length) {  //정상적으로 종료했다면 index와 배열의 길이가 같아야 함
            for (char ch : mos) {
                System.out.println(ch);
            }
        }

        //총 걸린 시간을 계산하는 과정
        long afterTime = System.currentTimeMillis();
        System.out.println("총 소요 시간: " + (afterTime - beforeTime) / 1000 + "초");
    }
}
