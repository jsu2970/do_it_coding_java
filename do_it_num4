import java.util.*;

/*
구간 합 문제에서 2차원 배열은 직사각형을 기준으로 값들을 모두 더하는 것이므로,
행(row) 기준으로 자신보다 아래에 있는 배열 값은 무시하고, 열(column) 기준으로 자신보다 오른쪽에 있는 값은 무시한다.
따라서 D[i][j] = D[i - 1][j] + D[i][j - 1] + 자신 위치의 값 - D[i - 1][j - 1]로 구간 합을 구할 수 있다.
D[i - 1][j - 1] 부분은 구간 합을 구하면서 겹친 값을 빼주는 과정이다.
 */

public class num4 {
    public static void main(String[] args)
    {
        int arrSize, question;
        Scanner sc = new Scanner(System.in);

        System.out.print("2차원 배열 크기, 구간 합 질의의 개수: ");
        arrSize = sc.nextInt();
        question = sc.nextInt();

        //배열 완성
        System.out.println("배열 입력: ");
        int[][] arr = new int[arrSize][arrSize];
        for (int i = 0; i < arrSize; i++) {
            for (int j = 0; j < arrSize; j++) {
                arr[i][j] = sc.nextInt();
            }
        }

        //질의 배열 완성
        System.out.println("x1, y1, x2, y2 각각 입력: ");
        int[][] arrQuestion = new int[question][4];  //2차원 배열의 구간 합이므로 한 줄당 입력되는 값은 무조건 4개임
        for (int i = 0; i < question; i++) {
            for (int j = 0; j < 4; j++) {
                arrQuestion[i][j] = sc.nextInt();
            }
        }

        long beforeTime = System.currentTimeMillis();  //실행 전 시간

        //구간 합 배열 완성
        long[][] sum = new long[arrSize][arrSize];
        for (int column = 0; column < arrSize; column++) {
            for (int row = 0; row < arrSize; row++) {
                //row가 0, column이 0인 경우에는 -1을 할 경우 문제가 생기므로 예외처리
                if (column == 0 && row == 0) {  //0, 0 위치
                    sum[column][row] = arr[column][row];
                }
                else if (column == 0) {  //열이 0인 경우 (좌우로 움직임)
                    sum[column][row] = sum[column][row - 1] + arr[column][row];
                }
                else if (row == 0) {  //행이 0인 경우 (위 아래로 움직임)
                    sum[column][row] = sum[column - 1][row] + arr[column][row];
                }
                else {
                    sum[column][row] = sum[column - 1][row] + sum[column][row - 1] + arr[column][row] - sum[column - 1][row - 1];
                }
            }
        }

        //출력해보기
//        for (int i = 0; i < arrSize; i++) {
//            for (int j = 0; j < arrSize; j++) {
//                System.out.printf("%d ", sum[i][j]);
//            }
//            System.out.println();
//        }

        //주어진 구간 합 구하기
        int x1, y1, x2, y2;
        for (int i = 0; i < question; i++) {
            //실제 인덱스 값을 고려해서 -1을 해준다.
            x1 = arrQuestion[i][0] - 1;
            y1 = arrQuestion[i][1] - 1;
            x2 = arrQuestion[i][2] - 1;
            y2 = arrQuestion[i][3] - 1;

            long result;
            //x1 또는 y1이 0이여서 -1을 할 때 문제가 발생할 수 있으므로 예외처리
            if (x1 == 0 && y1 == 0) {
                result = sum[x2][y2];
            }
            else if (y1 == 0) {
                result = sum[x2][y2] - sum[x1 - 1][y2];
            }
            else if (x1 == 0) {
                result = sum[x2][y2] - sum[x2][y1 - 1];
            }
            else {
            result = sum[x2][y2] - sum[x2][y1 - 1] - sum[x1 - 1][y2] + sum[x1 - 1][y1 - 1];
            }

            System.out.println((i + 1) + "번째 구간 합: " +result);
        }

        long afterTime = System.currentTimeMillis();  //실행 후 시간
        System.out.println("실행 시간: " + (afterTime - beforeTime)/ 1000 + "초");
    }
}
